#!/usr/bin/env node

/* jshint esnext: true */

const SIGINT = 'SIGINT';

var watch = require('node-watch');
var colors = require('colors');
var Proc = require('child_process');
var program = require('commander');

var log = function () {
    var args = Array.prototype.slice.call(arguments, 0);
    args = ['WATCH: '.black].concat(args);

    console.log.apply(console, args);
};

var exit = function (exitCode) {
    process.exit(exitCode || 0);
};

var validateOpt = function (opt, val) {
    if (val === undefined) {
        log((opt + ' is required').red);
        exit(1);
    }
};

program
    .description("watch dir for changes and run app on successful build")
    .option('-d, --dir <dir>', 'directory to watch for changes')
    .option('-f, --filter [filter]', 'files names filter', '.')
    .option('-b, --build-command <build-command>', 'build command to run on change')
    .option('-r, --run-command <run-command>', 'run command to run on successful build')
    .option('-i, --interval [interval]', 'interval to check for changes (in seconds)', parseInt, 5)
    .parse(process.argv);

// show help if no args specified
if (process.argv.length === 2) {
    program.help();
}

validateOpt('--dir', program.dir);
validateOpt('--build-command', program.buildCommand);
validateOpt('--run-command', program.runCommand);

var config = {
    pattern: new RegExp(program.filter),
    baseDir: program.dir,
    interval: program.interval*1000,
    buildCommand: program.buildCommand,
    runCommand: program.runCommand
};

var child;
var killApp = function () {
    if (child) {
        child.kill(SIGINT);
        child = null;
    }
};
var startApp = function () {
    child = Proc.spawn(config.runCommand);
    child.stdout.on('data', function(chunk) {
        console.log(chunk.toString().green);
    });
    child.stderr.on('data', function(chunk) {
        console.error(chunk.toString().red);
    });

    log('started app: PID', child.pid);
};

var tryToBuild = function () {
    Proc.exec(config.buildCommand, function (error, stdout, stderr) {
        if (error) {
            log("build failed:".red + "\n" + stderr);
            return;
        }

        killApp();
        startApp();
    });
};

// CHECKS

log("watching", config.baseDir,
    "for", config.pattern, "changes",
    "with interval", config.interval, "ms");

var changed = false;

// watch fs
watch(config.baseDir, function(file) {
    if (config.pattern.test(file)) {
        changed = true;
    }
});

// check if there were changes
setInterval(function () {
    if (changed) {
        log("changes detected, rebuilding");
        tryToBuild();
    }
    changed = false;
}, config.interval);

// handle Ctrl-C
process.on(SIGINT, function () {
    log('got a SIGINT, closing');
    killApp();
    exit(0);
});

// run app first time
log('running app');
tryToBuild();
